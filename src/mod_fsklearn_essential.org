* Mod_Fsklearn_Essential
#+options: ^:nil

  - In this module, some essential parts for the fsklearn
    are defined. They include the basic class Fsklearn_IO
three types of essential
    functions, some files and some derived type variables.
 - They will be used in mod_fsklearn to build the full
    machine learning module.
** Public classes
  - *Fsklearn_IO*
  - *Neural_Nwtwoek*
  - *Decision_Tree*
  - *Random_Forest*
** *Fsklearn_IO* class
 Contains the genetic procedures for a machine learning training and prediction. 

*** List of the variables in the class

|----------------------+--------------------------------------------------------|
| traininig_type       | the type of training. now should be                    |
|                      | *neural_network*, *decision_tree*, or *random_forest*. |
| training_script      | the python script generated by fortran code            |
| n_inputs             | count of input variables                               |
| n_outputs            | count of output variables                              |
| train_after_run      | whether to run after training                          |
| num_para             | numbers of coefficient from the training               |
| key                  | the list of coefficient keys,                          |
|                      | the length of the =key= is =num_para=                  |
| value                | the list of parameter values,                          |
|                      | the length of the =value= is =num_para=                |
| coef_files_path      | the path of the coefficient files                      |
| coef_file_name       | the name of the coefficient file                       |
| set_ml_file          | the =namelist= file for fortran code                   |
| training_data_path   | the path of training data                              |
| training_input_name  | the name of the training input file                    |
| training_output_name | the name of the trainign output file                   |
|----------------------+--------------------------------------------------------|

- Use of modules:

*None*

- list of variables:

#+begin_src fortran

  Private

  Public :: Write_Line
  Public :: Fsklearn_IO
  Public :: Neural_Network
  Public :: Decision_Tree
  Public :: Random_Forest

  ! Subject to the choice of precision.
  ! Single precision by default
# if defined(DOUBLE_PRECISION)
  Integer, Parameter :: PS = 8
# else
  Integer, Parameter :: PS = 4
# endif

  Type String
    Character(50) :: str
  End type String

  Type :: Fsklearn_IO
    Character(20) :: training_type
    Character(1000) :: Training_script
    Integer :: n_inputs
    Integer :: n_outputs
    Logical :: train_after_run
    Real(PS), Allocatable :: Inputs(:)
    Real(PS), Allocatable :: Outputs(:)
    Integer :: num_para
    Type(String) , Allocatable :: key(:)
    Type(String) , Allocatable :: value(:)
    Character(100) :: Coef_files_path      = './'
    Character(100) :: Coef_File_Name       = '' Character(100) :: set_ML_file          = 'fsklearn_coef.namelist'
    Character(100) :: training_py          = 'training.py'
    Character(100) :: training_data_path   = './'
    Character(100) :: training_input_name  = 'training_input'
    Character(100) :: training_output_name = 'training_output'
  Contains
    Procedure :: Common_Initialization
    Procedure , pass(self) :: Read_Coef => Common_Read_Coef
    Procedure :: Gen_PY => Generate_Training_Python
    Procedure :: Read_Training_Param => Common_Read_and_Update_Param
    Procedure :: Generate_Parameter_Script
    Procedure :: Py_Import
    Procedure :: PY_main
    Procedure :: PY_sk2f
  End Type Fsklearn_IO

  !↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓Neural Networks variables↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

  Type Ragged_Vector
    Real(PS), Allocatable :: Vec(:)
  End Type Ragged_vector

  Type Ragged_Matrix
    Real(PS), Allocatable :: Mat(:,:)
  End Type Ragged_Matrix

  Type :: NN_activation
    Procedure(Sub_Interface), Pointer, NoPass :: activate => NULL()
  End Type NN_activation

  ! interface for choose activation type
  Interface
    Function Sub_Interface(n, X)
      Import :: PS
      Integer,  Intent(in) :: n
      Real(PS), Intent(in), Dimension(n) :: X
      Real(PS), Dimension(n) :: Sub_Interface
    End Function Sub_Interface
  End Interface

  ! neural network coefficients
  Type, Extends(Fsklearn_IO) :: Neural_Network
    Integer :: layers
    Integer, Allocatable :: Layer_Size(:)
    Type(Ragged_Vector), Allocatable :: Activations(:)
    Type(Ragged_Vector), Allocatable :: Intercepts(:)
    Type(Ragged_Matrix), Allocatable :: Coefs(:)
    Character(10) :: Activation_type
    Character(10) :: out_Activation_type
    Type(NN_Activation) :: Activation
    Type(NN_Activation) :: Out_Activation
    Contains
      Procedure :: Read_Coef => NN_Read_Coef
      Procedure :: Predict_One => NN_Predict_One
      ! Procedure :: Predict_Vec => NN_Predict_Vec
      ! Procedure :: Predict_Mat => NN_Predict_Mat
      Procedure :: Read_Training_Param => NN_Read_and_Update_Param
  End Type Neural_Network
  !↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑End Neural Network Variables↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑


  !↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓Decision Tree Variables↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
  Type Nodes
    Integer  :: children_left
    Integer  :: children_right
    Integer  :: feature
    Real(PS) :: threshold
    Real(PS), Allocatable :: Values(:)
    ! Contains
  End Type Nodes

  type Trees
    Integer :: node_count
    Integer :: max_depth
    Type(Nodes), Allocatable :: Node(:)
  End type Trees

  Type, Extends(Fsklearn_IO) :: Decision_Tree
    Type(Trees) :: Tree
  Contains
    Procedure :: Read_Coef => DT_Read_Coef
    Procedure :: Predict_One => DT_Predict_One
    ! Procedure :: Predict_Vec => DT_Predict_Vec
    ! Procedure :: Predict_Mat => DT_Predict_Mat
    Procedure :: Read_Training_Param => DT_Read_and_Update_Param
  End Type Decision_Tree
  !↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑End Decision Tree Variables↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑


  !↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓Random Forest Variables↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
  Type, Extends(Fsklearn_IO) :: Random_Forest
    Integer :: tree_count
    Type(Trees), Allocatable :: Tree(:)
  Contains
    Procedure :: Read_Coef => RF_Read_Coef
    Procedure :: Predict_One => RF_Predict_One
    ! Procedure :: Predict_Vec => RF_Predict_Vec
    ! Procedure :: Predict_Mat => RF_Predict_Mat
    Procedure :: Read_Training_Param => RF_Read_and_Update_Param
  End Type Random_Forest
  !↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑End Random Forest Variables↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

  Interface Write_Line
    Module Procedure :: Write_Line_Real
    Module Procedure :: Write_Line_Integer
  end Interface Write_Line


#+end_src

** Common_Initialization

- Use of modules:
#+begin_src fortran
    Use mpi
#+end_src

input variables

*None*

output variables

*None*

- list of local variables:

** Common_Read_Coef

- Use of modules:
*None*

input variables

*None*

output variables

*None*

- list of local variables:

** NN_Read_Coef

- Use of modules:
#+begin_src fortran
    Use mpi
#+end_src

input variables

*None*

output variables

*None*

- list of local variables:

** DT_Read_Coef

- Use of modules:
#+begin_src fortran
    Use mpi
#+end_src

input variables

*None*

output variables

*None*

- list of local variables:

** RF_Read_Coef

- Use of modules:
#+begin_src fortran
    Use mpi
#+end_src

input variables

*None*

output variables

*None*

- list of local variables:

** NN_Predict_One

- Use of modules:
*None*

input variables

#+begin_src fortran
    Class(Neural_Network) :: self
    Real(PS) :: input(self%n_inputs)
    Real(PS) :: input(self%n_inputs)
    Real(PS) :: NN_Predict_One(self%n_outputs)
#+end_src

output variables

#+begin_src fortran
    Real(PS) :: NN_Predict_One(self%n_outputs)
#+end_src

- list of local variables:

*None*

** DT_Predict_One

- Use of modules:
*None*

input variables

#+begin_src fortran
    Class(Decision_Tree) :: self
    Real(PS) :: input(self%n_inputs)
    Real(PS) :: input(self%n_inputs)
    Real(PS) :: DT_Predict_One(self%n_outputs)
#+end_src

output variables

#+begin_src fortran
    Real(PS) :: DT_Predict_One(self%n_outputs)
#+end_src

- list of local variables:

*None*

** RF_Predict_One

- Use of modules:
*None*

input variables

#+begin_src fortran
    Class(Random_Forest) :: self
    Real(PS) :: input(self%n_inputs)
    Real(PS) :: input(self%n_inputs)
    Real(PS) :: RF_Predict_One(self%n_outputs)
#+end_src

output variables

#+begin_src fortran
    Real(PS) :: RF_Predict_One(self%n_outputs)
#+end_src

- list of local variables:

*None*

** Activation_logistic

- Use of modules:
*None*

input variables

#+begin_src fortran
    integer, Intent(in) :: n
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), dimension(n) :: Activation_logistic
#+end_src

output variables

#+begin_src fortran
    Real(PS), dimension(n) :: Activation_logistic
#+end_src

- list of local variables:

*None*

** Activation_tanh

- Use of modules:
*None*

input variables

#+begin_src fortran
    integer, Intent(in) :: n
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), dimension(n) :: Activation_tanh
#+end_src

output variables

#+begin_src fortran
    Real(PS), dimension(n) :: Activation_tanh
#+end_src

- list of local variables:

*None*

** Activation_ReLU

- Use of modules:
*None*

input variables

#+begin_src fortran
    integer, Intent(in) :: n
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), dimension(n) :: Activation_ReLU
#+end_src

output variables

#+begin_src fortran
    Real(PS), dimension(n) :: Activation_ReLU
#+end_src

- list of local variables:

*None*

** Activation_identity

- Use of modules:
*None*

input variables

#+begin_src fortran
    integer, Intent(in) :: n
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), dimension(n) :: Activation_identity
#+end_src

output variables

#+begin_src fortran
    Real(PS), dimension(n) :: Activation_identity
#+end_src

- list of local variables:

*None*

** Activation_softmax

- Use of modules:
*None*

input variables

#+begin_src fortran
    Integer, Intent(in) :: n
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), Intent(in), dimension(n) :: X
    Real(PS), dimension(n) :: tmp
    Real(PS), dimension(n) :: Activation_softmax
#+end_src

output variables

#+begin_src fortran
    Real(PS), dimension(n) :: Activation_softmax
#+end_src

- list of local variables:

*None*

** Write_Line_Integer

- Use of modules:
*None*

input variables

*None*

output variables

*None*

- list of local variables:

** Write_Line_Real

- Use of modules:
*None*

input variables

*None*

output variables

*None*

- list of local variables:

** Generate_Training_Python

- Use of modules:
*None*

input variables

#+begin_src fortran
    Integer, Intent(in) :: file_num 
#+end_src

output variables

*None*

- list of local variables:

** PY_main

- Use of modules:
#+begin_src fortran
    Use MPI
#+end_src

input variables

#+begin_src fortran
    Integer, Intent(in) :: file_num
#+end_src

output variables

*None*

- list of local variables:

** Py_import

- Use of modules:
*None*

input variables

*None*

output variables

*None*

- list of local variables:

** PY_sk2f

- Use of modules:
*None*

input variables

*None*

output variables

*None*

- list of local variables:

** Common_Read_and_Update_Param

- Use of modules:
*None*

input variables

#+begin_src fortran
    Integer, Intent(in) :: file_num
#+end_src

output variables

*None*

- list of local variables:

** NN_Read_and_Update_Param

- Use of modules:
*None*

input variables

#+begin_src fortran
    Integer, Intent(In) :: file_num
#+end_src

output variables

*None*

- list of local variables:

** DT_Read_and_Update_Param

- Use of modules:
*None*

input variables

#+begin_src fortran
    Integer, intent(in) :: file_num
#+end_src

output variables

*None*

- list of local variables:

** RF_Read_and_Update_Param

- Use of modules:
*None*

input variables

#+begin_src fortran
    Integer, intent(in) :: file_num
#+end_src

output variables

*None*

- list of local variables:



- Use of modules:
*None*

input variables

*None*

output variables

*None*

- list of local variables:

