#+options: toc:nil
#+options: ^:nil


!> | traininig_type       | the type of training. now should be                    |
!> |                      | *neural_network*, *decision_tree*, or *random_forest*. |
!> | training_script      | the python script generated by fortran code            |
!> | n_inputs             | count of input variables                               |
!> | n_outputs            | count of output variables                              |
!> | train_after_run      | whether to run after training                          |
!> | num_para             | numbers of coefficient from the training               |
!> | key                  | the list of coefficient keys,                          |
!> |                      | the length of the =key= is =num_para=                  |
!> | value                | the list of parameter values,                          |
!> |                      | the length of the =value= is =num_para=                |
!> | coef_files_path      | the path of the coefficient files                      |
!> | coef_file_name       | the name of the coefficient file                       |
!> | set_ml_file          | the =namelist= file for fortran code                   |
!> | training_data_path   | the path of training data                              |
!> | training_input_name  | the name of the training input file                    |
!> | training_output_name | the name of the trainign output file                   |

>
!> The ...
!> Now it has three inheritences: *Neural_Network* class, *Decision_Tree* class and,
!> *Random forest* class.
!>
!>   - Include the following components:
!>   - 1) Read_XX:
!>     + Read_Neural_Network
!>     + Read_Decision_Tree
!>     + Read_Random_Forest
!>   - 2) Predict_XX:
!>     + Predict_Neural_Network
!>     + Predict_Decision_Tree
!>     + Predict_Random_Forest
!>   - 3) Activation_XX:
!>     + Activation_logistic
!>     + Activation_tanh
!>     + Activation_ReLU
!>     + Activation_identity
!>     + Activation_softmax
!>  - For more details, see the corresponding region for
!>    each function.
!>
!--------------------------------------------------------
! Files:
!--------------------------------------------------------
!
! - Files associate with Fsklearn. If not set, the path
!   of the training data and the training coefficients
!   will be "fsklearn_data" and "fsklearn_coef" respectively
!
! - By dedault, only the "dsklearn_data", "fsklearn_coef"
!   needed to be set in fsklearn_initialization.
!
! - "coef_files_path":
!   + the path for fsklearn related coefficients
!
! - "set_ML_file":
!   + File name for setting coefficients
!   + Located in the path "coef_files_path"
!   + need to assign input vector length, output vector
!     length, training coefficients and some other
!     custom coefficients
!
! - "f2py_training_coef":
!   + json file that passes the coefficient to Python
!   + Located in the path "coef_files_path"
!
! - "nn_coef.dat":
!   + Neural network coefficients from Python code
!   + Located in the path "coef_files_path"
!
! - "dt_coefficients.dat":
!   + Decision tree coefficients from Python code
!   + Located in the path "coef_files_path"
!
! - "rf_coef.dat":
!   + Random forest coefficients from Python code
!   + Located in the path "coef_files_path"
!
! - "training_data_path":
!   + the path for training data
!
! - "training_py":
!   + python code generated by Fortran code
!
! - "training_data_path":
!   + the path for training data
! -"training_input_name":
!   + File name for input data
!   + Located in the path "training_data_path"
!   + The length of the data in each row is n_inputs
!   + If mpi with N processot is defined, there will be
!     N input files, Then all files will be gathered
!     automatically by the Python code.
!
! - "training_output_name":
!   + Located in the path "training_data_path"
!   + file name for put put data
!   + The length of the data in each row is n_outputs
!     N input files, Then all files will be gathered
!     automatically by the Python code.
!
!--------------------------------------------------------
! Module variables:
!--------------------------------------------------------
!
! PS:
!    - Precision for float number.
!    - PS = 4: single precision
!    - PS = 8: double precision
!
! Fsklearn_Define:
!    - Derived type that contains the machine learning
!       variables. It can do training and prediction
!       with a uniform way.
!    - %n_inputs:
!       + length of the input vector
!       + It is necessary to provide the length of the
!         input vector during initialization.
!    - %n_outputs:
!       + length of the output vector
!       + It is necessary to provide the length of the
!         output vector during initialization.
!    - %Inputs:
!       + Input vector, not necessary
!    - %Outputs:
!       + Output vector, not necessary
!    - %Para_Read:
!       + Read the coefficients and coefficients during
!         initialization for PREDICTION.
!    - %Predict:
!       + Predict erocedure
!    - %Gen_Training:
!       + Procedure for generate training data, can be
!         point to other subroutines.
!    - %Predict:
!       + Procedure for initialization, can be point to
!         other subroutines.
!
! Ragged_Vector:
!    - Declaration of ragged vector and ragged matrix.
!    - In this case, designed for neural networks.
!    - Ragged vectors for 2-D array consists of vectors with
!      different length
!    - Ragged vectors for 3-D array consists of matrice with
!      different sized
!
! NN_activation:
!    - Procedure used to choose activation function
!      at the beginning.
!
! Neural_Network:
!    - Derived Type containing all Neural network variables.
!    - %input_len:
!       + length of the input vector
!    - %output_len:
!       + length of the output vector
!    - %layers:
!       + layer of neural network
!    - %layer_size:
!       + 1-D vector with $(%layers) length, each element
!         each element represents the represents the number
!         of the neural in the corresponding layer.
!    - %Activations:
!       + Activation functions for each layer
!       + Ragged vector with $(%layers)-1 vectors, the length
!         of each vector Activations(i)%Vec is the same as
!         $(layer_size(i))
!    - %Intercepts:
!       + bias variable for each layer
!       + Ragged vector with $(%layers)-1 vectors, the length
!         of each vector Intercepts(i)%Vec is the same as
!         $(layer_size(i))
!    - %Coefs:
!       + coefficient for each neural
!       + Ragged matrix with $(%layers)-1 matrices
!       + The size Coefs(i)%Mat is
!         [$(layer_size(i+1)),$(layer_size(i))]
!    - %Activation type:
!       + Activation function. Contains 5 types:
!        'sigmoid', 'tanh', 'ReLU', 'ideneity', 'softmax'
!    - %Out_activation type:
!       + Activation function for output. Contains 5 types:
!        'sigmoid', 'tanh', 'ReLU', 'ideneity', 'softmax'
!    - %Activation:
!       + Uniform procedure calling activation function
!    - %Out_activation:
!       + Uniform procedure calling out activation function
!    - %Para_Read:
!       + Uniform procedure reading Neural Network Coefficients
!    - %Predict:
!       + Uniform procedure predicting Neural Network results
!
! Nodes:
!    - Derived type for binary tree node class
!    - Used in decision tree and random forest method
!    - %children_left:
!       + Node number of the left child
!    - %children_right:
!       + Node number of the Right child
!    - %feature:
!       + Choice of the input feature for logistic operation
!    - %threshold:
!       + Threshold for logistic operation
!    - %Value:
!       + Value of the predicted result for the corresponding
!         node. with the length of $(n_outputs)
!
! Decision_Tree:
!    - Derived Type containing all Decision Tree variables.
!    - %node_count
!       + amount of the nodes
!    - %n_inputs
!       + length of the input variables
!    - %n_outputs
!       + length of the output variables
!    - %max_depth
!       + maximum depth of the tree
!    - %Node
!       + nodes in decision trees, Nodes type
!
! Random_Forest:
!    - Derived Type containing all Random_Forest variables.
!    - %tree_count
!       + amount of the decision treees
!    - %n_inputs
!       + length of the input variables
!    - %n_outputs
!       + length of the output variables
!    - %Trees
!       + trees in random forest, Decision_Tree type
!
